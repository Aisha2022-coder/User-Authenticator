{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aisha\\\\OneDrive\\\\Desktop\\\\Auth Dashboard\\\\auth-dashboard\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Safe parse function to handle JSON parsing safely\nconst safeParse = data => {\n  try {\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Failed to parse JSON:', error);\n    return null; // Return null if JSON parsing fails\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState({\n    token: null,\n    user: null\n  });\n  const [loading, setLoading] = useState(true); // Track loading state\n  const navigate = useNavigate();\n\n  // Fetch user data using token\n  const fetchUserData = async token => {\n    try {\n      const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('User data:', response.data);\n    } catch (error) {\n      handleAuthError(error); // Handle authentication error\n    }\n  };\n\n  // Handle login functionality\n  const handleLogin = async credentials => {\n    // Check if username or email is provided\n    if (!credentials.username && !credentials.email) {\n      console.error('Username or email is required');\n      return; // Stop the function if validation fails\n    }\n\n    // If validation passes, proceed with the login request\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/login', credentials, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data && response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      } else {\n        console.error('No token found in response');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n    }\n  };\n\n  // Handle authentication errors (expired or invalid token)\n  const handleAuthError = error => {\n    if (error.response && error.response.status === 401 && (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))) {\n      alert('Your session has expired or the token is invalid. Please log in again.');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('refreshToken');\n      logout();\n      navigate('/login');\n    } else {\n      console.error('Unexpected authentication error:', error.message);\n    }\n  };\n\n  // Perform login action\n  const login = (user, token, refreshToken) => {\n    console.log('User:', user); // Verify if user is received correctly\n    console.log('Token:', token); // Verify if token is received correctly\n    console.log('Refresh Token:', refreshToken); // Verify if refreshToken is received correctly\n\n    if (user && token) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('refreshToken', refreshToken);\n      setAuth({\n        token,\n        user\n      });\n      console.log('Successfully logged in and stored data in localStorage.');\n      console.log('Stored token:', token); // Use the token directly\n    } else {\n      console.error('Token or user is missing, cannot store.');\n    }\n  };\n\n  // Perform logout action\n  const logout = () => {\n    setAuth({\n      token: null,\n      user: null\n    });\n    setLoading(false);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n    navigate('/login');\n  };\n\n  // Retrieve token from localStorage\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('No token found in localStorage');\n    }\n    return token;\n  };\n\n  // Check token on app load and fetch user data\n  useEffect(() => {\n    const storedToken = getToken(); // Ensure this is correctly getting the token\n    const storedUser = safeParse(localStorage.getItem('user')); // Retrieve and safely parse user\n\n    console.log('Retrieved token from localStorage:', storedToken); // Debugging log\n    console.log('Retrieved user from localStorage:', storedUser); // Debugging log\n\n    if (storedToken && storedUser) {\n      setAuth(prev => ({\n        ...prev,\n        token: storedToken,\n        user: storedUser\n      }));\n      fetchUserData(storedToken);\n    } else {\n      console.log('No token or user found, redirecting to login');\n      setLoading(false);\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  // Refresh token every 15 minutes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshToken();\n    }, 15 * 60 * 1000); // Refresh token every 15 minutes\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []);\n\n  // Handle token refresh\n  const refreshToken = async () => {\n    const storedRefreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token correctly\n    if (!storedRefreshToken) {\n      console.error('Refresh token is missing.');\n      logout();\n      navigate('/login');\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', {\n        token: storedRefreshToken\n      });\n      const {\n        accessToken\n      } = response.data;\n      localStorage.setItem('token', accessToken);\n      setAuth(prev => ({\n        ...prev,\n        token: accessToken\n      }));\n    } catch (error) {\n      handleAuthError(error); // Use handleAuthError to manage the error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      loading,\n      login,\n      logout,\n      handleLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"8sHYTCxMXgE4GvGQgwht2zoWZ4k=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","safeParse","data","JSON","parse","error","console","AuthProvider","children","_s","auth","setAuth","token","user","loading","setLoading","navigate","fetchUserData","response","get","headers","Authorization","log","handleAuthError","handleLogin","credentials","username","email","post","localStorage","setItem","stringify","_error$response","_error$response$data","message","status","includes","alert","removeItem","logout","login","refreshToken","getToken","getItem","storedToken","storedUser","prev","interval","setInterval","clearInterval","storedRefreshToken","accessToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/aisha/OneDrive/Desktop/Auth Dashboard/auth-dashboard/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// Safe parse function to handle JSON parsing safely\r\nconst safeParse = (data) => {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (error) {\r\n        console.error('Failed to parse JSON:', error);\r\n        return null;  // Return null if JSON parsing fails\r\n    }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [auth, setAuth] = useState({ token: null, user: null });\r\n    const [loading, setLoading] = useState(true); // Track loading state\r\n    const navigate = useNavigate();\r\n\r\n    // Fetch user data using token\r\n    const fetchUserData = async (token) => {\r\n        try {\r\n            const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            console.log('User data:', response.data);\r\n        } catch (error) {\r\n            handleAuthError(error);  // Handle authentication error\r\n        }\r\n    };\r\n\r\n    // Handle login functionality\r\n    const handleLogin = async (credentials) => {\r\n        // Check if username or email is provided\r\n        if (!credentials.username && !credentials.email) {\r\n            console.error('Username or email is required');\r\n            return; // Stop the function if validation fails\r\n        }\r\n    \r\n        // If validation passes, proceed with the login request\r\n        try {\r\n            const response = await axios.post(\r\n                'https://api.freeapi.app/api/v1/users/login',\r\n                credentials,\r\n                { headers: { 'Content-Type': 'application/json' } }\r\n            );\r\n    \r\n            if (response.data && response.data.token) {\r\n                localStorage.setItem('token', response.data.token);\r\n                localStorage.setItem('user', JSON.stringify(response.data.user));\r\n            } else {\r\n                console.error('No token found in response');\r\n            }\r\n        } catch (error) {\r\n            console.error('Login failed', error.response?.data?.message || error.message);\r\n        }\r\n    };\r\n    \r\n\r\n    // Handle authentication errors (expired or invalid token)\r\n    const handleAuthError = (error) => {\r\n        if (\r\n            error.response &&\r\n            error.response.status === 401 &&\r\n            (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))\r\n        ) {\r\n            alert('Your session has expired or the token is invalid. Please log in again.');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            localStorage.removeItem('refreshToken');\r\n            logout();\r\n            navigate('/login');\r\n        } else {\r\n            console.error('Unexpected authentication error:', error.message);\r\n        }\r\n    };\r\n\r\n    // Perform login action\r\n    const login = (user, token, refreshToken) => {\r\n        console.log('User:', user);  // Verify if user is received correctly\r\n        console.log('Token:', token);  // Verify if token is received correctly\r\n        console.log('Refresh Token:', refreshToken);  // Verify if refreshToken is received correctly\r\n\r\n        if (user && token) {\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            localStorage.setItem('refreshToken', refreshToken);\r\n            setAuth({ token, user });\r\n            console.log('Successfully logged in and stored data in localStorage.');\r\n            console.log('Stored token:', token);  // Use the token directly\r\n        } else {\r\n            console.error('Token or user is missing, cannot store.');\r\n        }\r\n    };\r\n\r\n    // Perform logout action\r\n    const logout = () => {\r\n        setAuth({ token: null, user: null });\r\n        setLoading(false);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('refreshToken');\r\n        navigate('/login');\r\n    };\r\n\r\n    // Retrieve token from localStorage\r\n    const getToken = () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.log('No token found in localStorage');\r\n        }\r\n        return token;\r\n    };\r\n\r\n    // Check token on app load and fetch user data\r\n    useEffect(() => {\r\n        const storedToken = getToken();  // Ensure this is correctly getting the token\r\n        const storedUser = safeParse(localStorage.getItem('user'));  // Retrieve and safely parse user\r\n    \r\n        console.log('Retrieved token from localStorage:', storedToken);  // Debugging log\r\n        console.log('Retrieved user from localStorage:', storedUser);  // Debugging log\r\n    \r\n        if (storedToken && storedUser) {\r\n            setAuth((prev) => ({ ...prev, token: storedToken, user: storedUser }));\r\n            fetchUserData(storedToken);\r\n        } else {\r\n            console.log('No token or user found, redirecting to login');\r\n            setLoading(false);\r\n            navigate('/login');\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Refresh token every 15 minutes\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            refreshToken();\r\n        }, 15 * 60 * 1000); // Refresh token every 15 minutes\r\n\r\n        return () => clearInterval(interval); // Cleanup on component unmount\r\n    }, []);\r\n\r\n    // Handle token refresh\r\n    const refreshToken = async () => {\r\n        const storedRefreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token correctly\r\n        if (!storedRefreshToken) {\r\n            console.error('Refresh token is missing.');\r\n            logout();\r\n            navigate('/login');\r\n            return;\r\n        }        \r\n        try {\r\n            const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', { token: storedRefreshToken });\r\n            const { accessToken } = response.data;\r\n            localStorage.setItem('token', accessToken);\r\n            setAuth((prev) => ({ ...prev, token: accessToken }));\r\n        } catch (error) {\r\n            handleAuthError(error);  // Use handleAuthError to manage the error\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ auth, loading, login, logout, handleLogin }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}