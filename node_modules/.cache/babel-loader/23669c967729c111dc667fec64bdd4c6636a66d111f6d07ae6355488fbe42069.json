{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aisha\\\\OneDrive\\\\Desktop\\\\Auth Dashboard\\\\auth-dashboard\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Safe parse function to handle JSON parsing safely\nconst safeParse = data => {\n  try {\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Failed to parse JSON:', error);\n    return null; // Return null if JSON parsing fails\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState({\n    token: null,\n    user: null\n  });\n  const [loading, setLoading] = useState(true); // Track loading state\n  const navigate = useNavigate();\n  const location = useLocation(); // Use the `useLocation` hook\n\n  // Fetch user data using token\n  const fetchUserData = async token => {\n    try {\n      const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('User data:', response.data);\n    } catch (error) {\n      handleAuthError(error); // Handle authentication error\n    }\n  };\n\n  // AuthContext.js\n  const handleLogin = async credentials => {\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/login', credentials, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.data && response.data.data.accessToken) {\n        const user = response.data.data.user;\n        const token = response.data.data.accessToken;\n\n        // Save token and user data in localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        console.log('Successfully logged in');\n        setAuth({\n          token,\n          user\n        }); // Update context state with token and user\n\n        // Return response to indicate success\n        return response;\n      } else {\n        console.error('No token found in response');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      throw error; // Throw the error so it can be caught in the Login component\n    }\n  };\n\n  // Handle authentication errors (expired or invalid token)\n  const handleAuthError = error => {\n    if (error.response && error.response.status === 401 && (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))) {\n      alert('Your session has expired or the token is invalid. Please log in again.');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('refreshToken');\n      logout();\n      navigate('/login');\n    } else {\n      console.error('Unexpected authentication error:', error.message);\n    }\n  };\n\n  // Perform logout action\n  const logout = () => {\n    setAuth({\n      token: null,\n      user: null\n    });\n    setLoading(false);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken');\n    navigate('/login');\n  };\n\n  // Retrieve token from localStorage\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('No token found in localStorage');\n    }\n    return token;\n  };\n\n  // Check token on app load and fetch user data\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    const storedUser = safeParse(localStorage.getItem('user'));\n\n    // Allow the `/signup` route without redirecting\n    if (location.pathname === '/signup') {\n      setLoading(false);\n      return;\n    }\n    if (storedToken && storedUser) {\n      setAuth({\n        token: storedToken,\n        user: storedUser\n      });\n      fetchUserData(storedToken);\n      navigate('/dashboard');\n    } else {\n      setLoading(false);\n      if (location.pathname !== '/login') {\n        navigate('/login'); // Redirect only if not already on `/login`\n      }\n    }\n  }, [location, navigate]); // Use `location` as a dependency\n\n  // Refresh token every 15 minutes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshToken();\n    }, 15 * 60 * 1000); // Refresh token every 15 minutes\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []);\n\n  // Handle token refresh\n  const refreshToken = async () => {\n    const storedRefreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token correctly\n    if (!storedRefreshToken) {\n      console.error('Refresh token is missing.');\n      logout();\n      navigate('/login');\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', {\n        token: storedRefreshToken\n      });\n      const {\n        accessToken\n      } = response.data;\n      localStorage.setItem('token', accessToken);\n      setAuth(prev => ({\n        ...prev,\n        token: accessToken\n      }));\n    } catch (error) {\n      handleAuthError(error); // Use handleAuthError to manage the error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      loading,\n      handleLogin,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"uiqk7K0Hmp0HkvKP7YeYl/E8PDk=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","AuthContext","safeParse","data","JSON","parse","error","console","AuthProvider","children","_s","auth","setAuth","token","user","loading","setLoading","navigate","location","fetchUserData","response","get","headers","Authorization","log","handleAuthError","handleLogin","credentials","post","accessToken","localStorage","setItem","stringify","_error$response","_error$response$data","message","status","includes","alert","removeItem","logout","getToken","getItem","storedToken","storedUser","pathname","interval","setInterval","refreshToken","clearInterval","storedRefreshToken","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/aisha/OneDrive/Desktop/Auth Dashboard/auth-dashboard/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// Safe parse function to handle JSON parsing safely\r\nconst safeParse = (data) => {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (error) {\r\n        console.error('Failed to parse JSON:', error);\r\n        return null; // Return null if JSON parsing fails\r\n    }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [auth, setAuth] = useState({ token: null, user: null });\r\n    const [loading, setLoading] = useState(true); // Track loading state\r\n    const navigate = useNavigate();\r\n    const location = useLocation(); // Use the `useLocation` hook\r\n\r\n    // Fetch user data using token\r\n    const fetchUserData = async (token) => {\r\n        try {\r\n            const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            console.log('User data:', response.data);\r\n        } catch (error) {\r\n            handleAuthError(error); // Handle authentication error\r\n        }\r\n    };\r\n\r\n\r\n    // AuthContext.js\r\nconst handleLogin = async (credentials) => {\r\n    try {\r\n        const response = await axios.post(\r\n            'https://api.freeapi.app/api/v1/users/login',\r\n            credentials,\r\n            { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n\r\n        if (response.data && response.data.data.accessToken) {\r\n            const user = response.data.data.user;\r\n            const token = response.data.data.accessToken;\r\n\r\n            // Save token and user data in localStorage\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n\r\n            console.log('Successfully logged in');\r\n            setAuth({ token, user });  // Update context state with token and user\r\n\r\n            // Return response to indicate success\r\n            return response;\r\n        } else {\r\n            console.error('No token found in response');\r\n        }\r\n    } catch (error) {\r\n        console.error('Login failed:', error.response?.data?.message || error.message);\r\n        throw error;  // Throw the error so it can be caught in the Login component\r\n    }\r\n};\r\n\r\n    // Handle authentication errors (expired or invalid token)\r\n    const handleAuthError = (error) => {\r\n        if (\r\n            error.response &&\r\n            error.response.status === 401 &&\r\n            (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))\r\n        ) {\r\n            alert('Your session has expired or the token is invalid. Please log in again.');\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            localStorage.removeItem('refreshToken');\r\n            logout();\r\n            navigate('/login');\r\n        } else {\r\n            console.error('Unexpected authentication error:', error.message);\r\n        }\r\n    };\r\n\r\n    // Perform logout action\r\n    const logout = () => {\r\n        setAuth({ token: null, user: null });\r\n        setLoading(false);\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('refreshToken');\r\n        navigate('/login');\r\n    };\r\n\r\n    // Retrieve token from localStorage\r\n    const getToken = () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            console.log('No token found in localStorage');\r\n        }\r\n        return token;\r\n    };\r\n\r\n    // Check token on app load and fetch user data\r\n    useEffect(() => {\r\n        const storedToken = localStorage.getItem('token');\r\n        const storedUser = safeParse(localStorage.getItem('user'));\r\n\r\n        // Allow the `/signup` route without redirecting\r\n        if (location.pathname === '/signup') {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        if (storedToken && storedUser) {\r\n            setAuth({ token: storedToken, user: storedUser });\r\n            fetchUserData(storedToken);\r\n            navigate('/dashboard');\r\n        } else {\r\n            setLoading(false);\r\n            if (location.pathname !== '/login') {\r\n                navigate('/login'); // Redirect only if not already on `/login`\r\n            }\r\n        }\r\n    }, [location, navigate]); // Use `location` as a dependency\r\n\r\n    // Refresh token every 15 minutes\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            refreshToken();\r\n        }, 15 * 60 * 1000); // Refresh token every 15 minutes\r\n\r\n        return () => clearInterval(interval); // Cleanup on component unmount\r\n    }, []);\r\n\r\n    // Handle token refresh\r\n    const refreshToken = async () => {\r\n        const storedRefreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token correctly\r\n        if (!storedRefreshToken) {\r\n            console.error('Refresh token is missing.');\r\n            logout();\r\n            navigate('/login');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', { token: storedRefreshToken });\r\n            const { accessToken } = response.data;\r\n            localStorage.setItem('token', accessToken);\r\n            setAuth((prev) => ({ ...prev, token: accessToken }));\r\n        } catch (error) {\r\n            handleAuthError(error); // Use handleAuthError to manage the error\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ auth, loading, handleLogin, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};    \r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}