{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aisha\\\\OneDrive\\\\Desktop\\\\Auth Dashboard\\\\auth-dashboard\\\\src\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    getToken\n  } = useAuth(); // Get the getToken function from AuthContext\n  const token = getToken(); // Retrieve the token\n\n  if (!token) {\n    console.warn('No token found. Redirecting to login.'); // Log a warning if no token is found\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this); // Redirect to login page if no token\n  }\n  return children; // Render the protected route if token exists\n};\n_s(ProtectedRoute, \"TZyIvyGBnam54p/7H4rjGZDRcCU=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","getToken","token","console","warn","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aisha/OneDrive/Desktop/Auth Dashboard/auth-dashboard/src/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const { getToken } = useAuth(); // Get the getToken function from AuthContext\r\n    const token = getToken(); // Retrieve the token\r\n\r\n    if (!token) {\r\n        console.warn('No token found. Redirecting to login.'); // Log a warning if no token is found\r\n        return <Navigate to=\"/login\" />; // Redirect to login page if no token\r\n    }\r\n\r\n    return children; // Render the protected route if token exists\r\n};\r\n\r\nexport default ProtectedRoute;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAS,CAAC,GAAGN,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMO,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1B,IAAI,CAACC,KAAK,EAAE;IACRC,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC,CAAC,CAAC;IACvD,oBAAOP,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACrC;EAEA,OAAOV,QAAQ,CAAC,CAAC;AACrB,CAAC;AAACC,EAAA,CAVIF,cAAc;EAAA,QACKH,OAAO;AAAA;AAAAe,EAAA,GAD1BZ,cAAc;AAYpB,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}