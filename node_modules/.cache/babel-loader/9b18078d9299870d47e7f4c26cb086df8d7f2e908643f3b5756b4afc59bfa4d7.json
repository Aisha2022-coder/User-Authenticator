{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aisha\\\\OneDrive\\\\Desktop\\\\Auth Dashboard\\\\auth-dashboard\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState({\n    token: null,\n    user: null\n  });\n  const [loading, setLoading] = useState(true); // Start with loading as true until token is checked\n\n  // Fetch user data using token\n  const fetchUserData = async token => {\n    try {\n      const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setAuth(prev => ({\n        ...prev,\n        user: response.data // Set user data directly\n      }));\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      handleAuthError(error);\n    } finally {\n      setLoading(false); // Ensure loading is set to false once data is fetched or an error occurs\n    }\n  };\n\n  // Handle login functionality\n  const handleLogin = async credentials => {\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/login', credentials);\n      console.log('Login response:', response.data); // Check the response data\n      const {\n        user,\n        token,\n        refreshToken\n      } = response.data; // Destructure token and user from response\n      if (!user || !token || !refreshToken) {\n        throw new Error('Invalid response format');\n      }\n      login(user, token, refreshToken); // Save user and token in state\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      console.error('Login failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Login failed. Please try again.');\n    }\n  };\n\n  // Handle authentication errors\n  const handleAuthError = error => {\n    if (error.response && error.response.status === 401 && (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))) {\n      alert('Your session has expired or the token is invalid. Please log in again.');\n      logout();\n    } else {\n      console.error('Unexpected authentication error:', error.message);\n    }\n  };\n\n  // Perform login action\n  const login = (user, token, refreshToken) => {\n    try {\n      setAuth({\n        token,\n        user\n      });\n      localStorage.setItem('token', token); // Store token in localStorage\n      localStorage.setItem('user', JSON.stringify(user)); // Store user in localStorage (if needed)\n      localStorage.setItem('refreshToken', refreshToken); // Store refresh token in localStorage (if applicable)\n      console.log('Token stored in localStorage:', localStorage.getItem('token')); // Verify token is stored\n      setLoading(false); // Set loading to false after successful login\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  // Perform logout action\n  const logout = () => {\n    setAuth({\n      token: null,\n      user: null\n    });\n    setLoading(false); // Ensure loading is false when logged out\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('refreshToken'); // Remove refresh token\n    console.log('Token removed from localStorage:', localStorage.getItem('token')); // Confirm token removal\n  };\n\n  // Retrieve token from localStorage\n  const getToken = () => {\n    const token = localStorage.getItem('token');\n    console.log('Retrieved token from localStorage:', token); // Log token\n    return token;\n  };\n\n  // Check token on app load\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    console.log(\"Token from localStorage:\", storedToken); // Log token on page load\n\n    if (storedToken) {\n      setAuth(prev => ({\n        ...prev,\n        token: storedToken\n      }));\n      fetchUserData(storedToken); // Fetch user data if token exists\n    } else {\n      setLoading(false); // Mark loading as complete if no token exists\n    }\n  }, []);\n\n  // Refresh token every 15 minutes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshToken();\n    }, 15 * 60 * 1000); // Refresh token every 15 minutes\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Handle token refresh\n  const refreshToken = async () => {\n    const storedRefreshToken = localStorage.getItem('refreshToken');\n    if (!storedRefreshToken) {\n      console.error('Refresh token is missing.');\n      return;\n    }\n    try {\n      const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', {\n        token: storedRefreshToken\n      });\n      const {\n        accessToken\n      } = response.data;\n      setAuth(prev => ({\n        ...prev,\n        token: accessToken\n      }));\n\n      // Update token in localStorage\n      localStorage.setItem('token', accessToken);\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      logout(); // Log out if refresh fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      loading,\n      login,\n      logout,\n      handleLogin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"dDXHIZyHVFBdIcKCYEP5sJL2cnk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","setAuth","token","user","loading","setLoading","fetchUserData","response","get","headers","Authorization","prev","data","error","console","handleAuthError","handleLogin","credentials","post","log","refreshToken","Error","login","_error$response","_error$response2","_error$response2$data","message","alert","status","includes","logout","localStorage","setItem","JSON","stringify","getItem","removeItem","getToken","storedToken","interval","setInterval","clearInterval","storedRefreshToken","accessToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/aisha/OneDrive/Desktop/Auth Dashboard/auth-dashboard/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [auth, setAuth] = useState({ token: null, user: null });\r\n    const [loading, setLoading] = useState(true); // Start with loading as true until token is checked\r\n\r\n    // Fetch user data using token\r\n    const fetchUserData = async (token) => {\r\n        try {\r\n            const response = await axios.get('https://api.freeapi.app/api/v1/users/current-user', {\r\n                headers: { Authorization: `Bearer ${token}` },\r\n            });\r\n            setAuth((prev) => ({\r\n                ...prev,\r\n                user: response.data, // Set user data directly\r\n            }));\r\n        } catch (error) {\r\n            console.error('Failed to fetch user data:', error);\r\n            handleAuthError(error);\r\n        } finally {\r\n            setLoading(false); // Ensure loading is set to false once data is fetched or an error occurs\r\n        }\r\n    };\r\n\r\n    // Handle login functionality\r\n    const handleLogin = async (credentials) => {\r\n        try {\r\n            const response = await axios.post('https://api.freeapi.app/api/v1/users/login', credentials);\r\n            console.log('Login response:', response.data); // Check the response data\r\n            const { user, token, refreshToken } = response.data; // Destructure token and user from response\r\n            if (!user || !token || !refreshToken) {\r\n                throw new Error('Invalid response format');\r\n            }\r\n            login(user, token, refreshToken); // Save user and token in state\r\n        } catch (error) {\r\n            console.error('Login failed:', error.response?.data || error.message);\r\n            alert(error.response?.data?.message || 'Login failed. Please try again.');\r\n        }\r\n    };\r\n\r\n    // Handle authentication errors\r\n    const handleAuthError = (error) => {\r\n        if (\r\n            error.response &&\r\n            error.response.status === 401 &&\r\n            (error.response.data.message === 'jwt malformed' || error.response.data.message.includes('expired'))\r\n        ) {\r\n            alert('Your session has expired or the token is invalid. Please log in again.');\r\n            logout();\r\n        } else {\r\n            console.error('Unexpected authentication error:', error.message);\r\n        }\r\n    };\r\n\r\n    // Perform login action\r\n    const login = (user, token, refreshToken) => {\r\n        try {\r\n            setAuth({ token, user });\r\n            localStorage.setItem('token', token); // Store token in localStorage\r\n            localStorage.setItem('user', JSON.stringify(user)); // Store user in localStorage (if needed)\r\n            localStorage.setItem('refreshToken', refreshToken); // Store refresh token in localStorage (if applicable)\r\n            console.log('Token stored in localStorage:', localStorage.getItem('token')); // Verify token is stored\r\n            setLoading(false); // Set loading to false after successful login\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n        }\r\n    };\r\n\r\n    // Perform logout action\r\n    const logout = () => {\r\n        setAuth({ token: null, user: null });\r\n        setLoading(false); // Ensure loading is false when logged out\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('refreshToken'); // Remove refresh token\r\n        console.log('Token removed from localStorage:', localStorage.getItem('token')); // Confirm token removal\r\n    };\r\n\r\n    // Retrieve token from localStorage\r\n    const getToken = () => {\r\n        const token = localStorage.getItem('token');\r\n        console.log('Retrieved token from localStorage:', token); // Log token\r\n        return token;\r\n    };\r\n\r\n    // Check token on app load\r\n    useEffect(() => {\r\n        const storedToken = localStorage.getItem('token');\r\n        console.log(\"Token from localStorage:\", storedToken); // Log token on page load\r\n\r\n        if (storedToken) {\r\n            setAuth((prev) => ({\r\n                ...prev,\r\n                token: storedToken,\r\n            }));\r\n            fetchUserData(storedToken); // Fetch user data if token exists\r\n        } else {\r\n            setLoading(false);  // Mark loading as complete if no token exists\r\n        }\r\n    }, []);\r\n    \r\n    // Refresh token every 15 minutes\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            refreshToken();\r\n        }, 15 * 60 * 1000); // Refresh token every 15 minutes\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    // Handle token refresh\r\n    const refreshToken = async () => {\r\n        const storedRefreshToken = localStorage.getItem('refreshToken');\r\n        if (!storedRefreshToken) {\r\n            console.error('Refresh token is missing.');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post('https://api.freeapi.app/api/v1/users/refresh-token', { token: storedRefreshToken });\r\n            const { accessToken } = response.data;\r\n\r\n            setAuth((prev) => ({\r\n                ...prev,\r\n                token: accessToken,\r\n            }));\r\n\r\n            // Update token in localStorage\r\n            localStorage.setItem('token', accessToken);\r\n        } catch (error) {\r\n            console.error('Token refresh failed:', error);\r\n            logout(); // Log out if refresh fails\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ auth, loading, login, logout, handleLogin }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}